{"version":3,"sources":["../../../widgets/Xunta_IAG/Widget.js"],"names":["define","declare","BaseWidget","FeatureLayer","SpatialReference","QueryTask","Query","Graphic","SimpleFillSymbol","SimpleLineSymbol","Color","lang","baseClass","postCreate","inherited","arguments","console","log","cargaConcellos","codigoProvincia","selectorProvincias","value","selectorConcellos","innerHTML","tareaConsulta","config","urlConcellos","consulta","returnGeometry","outFields","orderByFields","where","execute","hitch","resultados","opcion","document","createElement","text","add","i","features","length","attributes","CODCONC","CONCELLO","cargaParroquias","codigoConcello","selectorParroquias","urlParroquias","CODPARRO","PARROQUIA","zoomConcello","outSpatialReference","resultado","geometria","geometry","simbolo","STYLE_SOLID","STYLE_DASHDOT","poligono","map","graphics","clear","setExtent","getExtent","zoomParroquia","codigoParroquia","borrarSeleccion"],"mappings":"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","file":"Widget.js","sourcesContent":["define([\r\n  'dojo/_base/declare', \r\n  'jimu/BaseWidget',\r\n\r\n  \"esri/layers/FeatureLayer\",\r\n  \"esri/SpatialReference\",\r\n\r\n  \"esri/tasks/QueryTask\",\r\n  \"esri/tasks/query\",\r\n\r\n  \"esri/graphic\",\r\n  \"esri/symbols/SimpleFillSymbol\",\r\n  \"esri/symbols/SimpleLineSymbol\",\r\n  \"esri/Color\",\r\n\r\n  \"dojo/_base/lang\"\r\n],\r\nfunction(\r\n  declare, \r\n  BaseWidget,\r\n\r\n  FeatureLayer,\r\n  SpatialReference,\r\n\r\n  QueryTask,\r\n  Query,\r\n\r\n  Graphic,\r\n  SimpleFillSymbol,\r\n  SimpleLineSymbol,\r\n  Color,\r\n\r\n  lang\r\n  ) {\r\n  //To create a widget, you need to derive from BaseWidget.\r\n  return declare([BaseWidget], {\r\n\r\n    // Custom widget code goes here\r\n\r\n    baseClass: 'xunta-i-a-g',\r\n    // this property is set by the framework when widget is loaded.\r\n    // name: 'Xunta_IAG',\r\n    // add additional properties here\r\n\r\n    //methods to communication with app container:\r\n    postCreate: function() {\r\n      this.inherited(arguments);\r\n      console.log('Xunta_IAG::postCreate');\r\n    },\r\n\r\n    // startup: function() {\r\n    //   this.inherited(arguments);\r\n    //   console.log('Xunta_IAG::startup');\r\n    // },\r\n\r\n    // onOpen: function(){\r\n    //   console.log('Xunta_IAG::onOpen');\r\n    // },\r\n\r\n\r\n\r\n    // Defino la función que se lanza al hacer un cambio en el selector de provincias:\r\n    cargaConcellos() {\r\n      \r\n      // Guardo en una variable el codigo de la provincia indicada en el selector de provincias:\r\n      var codigoProvincia = this.selectorProvincias.value;\r\n      \r\n      // Indico que si el valor de la variable es el correspondiente a no haber seleccionado ninguna, el código no continue:\r\n      if(codigoProvincia == -1) return;\r\n\r\n      // Si el código si que continua tras lo anterior, lo siguiente que hace es dejar la lista de opciones del selector vacía:\r\n      this.selectorConcellos.innerHTML = \"\";\r\n\r\n      // Creo y guardo en una variable una query task, que consultará la url de concellos almacenada en el archivo config:\r\n      const tareaConsulta = new QueryTask(this.config.urlConcellos);\r\n\r\n      // Creo y guardo en una variable la query para pasarle a la query task, a continuación defino sus parámetros:\r\n      const consulta = new Query();\r\n      // Indico que no me devuelva la geometía de los resultados, para guardarlos en el selector solo necesito los valores:\r\n      consulta.returnGeometry = false;\r\n      // Indico los campos que me tiene que devolver la consulta:\r\n      consulta.outFields = [\"CODCONC\", \"CONCELLO\"];\r\n      // Indico que me devuelva las entidades de la consulta ordenados por el nombre del concejo:\r\n      consulta.orderByFields = [\"CONCELLO\"];\r\n      // Indico el texto de la consulta, buscando todos las entidades dentro de los concejos cuyo código de provincia coincida con el indicado en el selector:\r\n      consulta.where = \"CODPROV = \" + codigoProvincia;\r\n\r\n      // Resuelvo la query task, con la query configurada, y lanzo la función a ejecutar cuando se complete:\r\n      // Añado lang.hitch para mantener el entorno de la función anterior y poder llamar elementos con this:\r\n      tareaConsulta.execute(consulta, lang.hitch(this, function(resultados){\r\n\r\n        console.log(\"Los resultados: \", resultados)\r\n        \r\n        // Añado en el selector de concellos la opción por defecto:\r\n        \r\n        // Creo y guardo en una variable un elemento html de tipo option:\r\n        var opcion = document.createElement(\"option\");\r\n        // Indico el valor del elemento option:\r\n        opcion.value = -1;\r\n        // Indico el texto que mostrará el elemento option:\r\n        opcion.text = \"Seleccione un concello:\";\r\n        // Añado el elemento option al select de concellos del html:\r\n        this.selectorConcellos.add(opcion);\r\n        \r\n        // Itero por los resultados de la query task para agregarlos al select de concellos de forma similar a la opción por defecto:\r\n        for (let i = 0; i < resultados.features.length; i++) {\r\n\r\n          opcion = document.createElement(\"option\");\r\n          // Indico el valor a partir de las propiedades de los resultados, cogiendolo del campo de código del concello:\r\n          opcion.value = resultados.features[i].attributes.CODCONC;\r\n          // Indico el texto a partir de las propiedades de los resultados, cogiendolo del campo de nombre del concello:\r\n          opcion.text = resultados.features[i].attributes.CONCELLO;\r\n          this.selectorConcellos.add(opcion);\r\n\r\n        }\r\n\r\n      }));\r\n\r\n    },\r\n\r\n    // Defino la función que se lanza al hacer un cambio en el selector de concellos, que es similar a la anterior:\r\n    cargaParroquias() {\r\n\r\n      var codigoConcello = this.selectorConcellos.value;\r\n      \r\n      if(codigoConcello == -1) return;\r\n\r\n      this.selectorParroquias.innerHTML = \"\";\r\n\r\n      const tareaConsulta = new QueryTask(this.config.urlParroquias);\r\n\r\n      const consulta = new Query();\r\n      consulta.returnGeometry = false;\r\n      consulta.outFields = [\"CODPARRO\", \"PARROQUIA\"];\r\n      consulta.orderByFields = [\"PARROQUIA\"];\r\n      consulta.where = \"CODCONC = \" + codigoConcello;\r\n\r\n      tareaConsulta.execute(consulta, lang.hitch(this, function(resultados){\r\n\r\n        console.log(\"Los resultados: \", resultados)\r\n        \r\n        var opcion = document.createElement(\"option\");\r\n        opcion.value = -1;\r\n        opcion.text = \"Seleccione una parroquia:\";\r\n        this.selectorParroquias.add(opcion);\r\n\r\n        for (let i = 0; i < resultados.features.length; i++) {\r\n\r\n          opcion = document.createElement(\"option\");\r\n          opcion.value = resultados.features[i].attributes.CODPARRO;\r\n          opcion.text = resultados.features[i].attributes.PARROQUIA;\r\n          this.selectorParroquias.add(opcion);\r\n\r\n        }\r\n\r\n      }));\r\n\r\n    },\r\n\r\n    // Defino la función que se lanza al pulsar en el botón de buscar concello:\r\n    zoomConcello() {\r\n\r\n      // Guardo en una variable el codigo del concello indicado en el selector de concellos:\r\n      var codigoConcello = this.selectorConcellos.value;\r\n\r\n      // Indico que si el valor de la variable es el correspondiente a la opción por defecto (no haber seleccionado ninguno), el código no continue:      \r\n      if(codigoConcello == -1) return;\r\n      \r\n      // Creo y guardo en una variable una query task, que consultará la url de concellos almacenada en el archivo config:\r\n      const tareaConsulta = new QueryTask(this.config.urlConcellos);\r\n\r\n      // Creo y guardo en una variable la query para pasarle a la query task, a continuación defino sus parámetros:\r\n      const consulta = new Query();\r\n      // Indico que la consulta devuelva la geometía de los resultados, para usarlos para representar el polígono en el mapa:\r\n      consulta.returnGeometry = true;\r\n      // Indico los campos que me tiene que devolver la consulta:\r\n      consulta.outFields = [\"CODCONC\", \"CONCELLO\"];\r\n      // Indico que me devuelva las entidades de la consulta ordenados por el nombre del concejo:\r\n      consulta.orderByFields = [\"CONCELLO\"];\r\n      // Indico el texto de la consulta, buscando la entidad dentro de los concellos cuyo código oincida con el indicado en el selector de concellos:\r\n      consulta.where = \"CODCONC = \" + codigoConcello;\r\n      // Indico que la referencia espacial de los resultados sea igual a la del mapa base:\r\n      consulta.outSpatialReference = new SpatialReference(102100);\r\n\r\n      // Resuelvo la query task, con la query configurada, y lanzo la función a ejecutar cuando se complete:\r\n      // Añado lang.hitch para mantener el entorno de la función anterior y poder llamar elementos con this:\r\n      tareaConsulta.execute(consulta, lang.hitch(this, function(resultado){\r\n\r\n        console.log(resultado);\r\n\r\n        // Indico a la función que solo dibuje el polígono devuelto por la consulta si la consulta ha devuelto algún elemento:\r\n        if (resultado.features.length > 0) {\r\n\r\n          // Guardo en una variable la geometría del primer elemento de las entidades de los resultados de la consulta:\r\n          var geometria = resultado.features[0].geometry;\r\n          // Creo y guardo en una variable una simbología para el polígono que se va a dibujar:\r\n          var simbolo = new SimpleFillSymbol(\r\n            SimpleFillSymbol.STYLE_SOLID,\r\n            new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new Color([0,0,0]), 2),\r\n            new Color([0,127,255,0.35])\r\n          );\r\n\r\n          // Creo y guardo en una variable un nuevo gráfico con la geometría y el símbolo anteriores:\r\n          poligono = new Graphic(geometria, simbolo);\r\n        \r\n          // Borro cualquier otro gráfico del mapa antes de añadir el nuevo:\r\n          this.map.graphics.clear();\r\n          // Añado el gráfico en la capa gráficos que tiene por defecto el mapa:\r\n          this.map.graphics.add(poligono);\r\n          // Centro el mapa en la extensión obtenida de la geometría del resultado:\r\n          this.map.setExtent(geometria.getExtent(), true);\r\n\r\n        }\r\n\r\n      }));\r\n\r\n    },\r\n\r\n    // Defino la función que se lanza al pulsar en el botón de buscar concello, que es similar a la anterior:\r\n    zoomParroquia() {\r\n\r\n      var codigoParroquia = this.selectorParroquias.value;\r\n      \r\n      if(codigoParroquia == -1) return;\r\n\r\n      const tareaConsulta = new QueryTask(this.config.urlParroquias);\r\n\r\n      const consulta = new Query();\r\n      consulta.returnGeometry = true;\r\n      consulta.outFields = [\"CODPARRO\", \"PARROQUIA\"];\r\n      consulta.orderByFields = [\"PARROQUIA\"];\r\n      consulta.where = \"CODPARRO = \" + codigoParroquia;\r\n      consulta.outSpatialReference = new SpatialReference(102100);\r\n\r\n      tareaConsulta.execute(consulta, lang.hitch(this, function(resultado){\r\n\r\n        console.log(resultado);\r\n\r\n        if (resultado.features.length > 0) {\r\n\r\n          var geometria = resultado.features[0].geometry;\r\n          var simbolo = new SimpleFillSymbol(\r\n            SimpleFillSymbol.STYLE_SOLID,\r\n            new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new Color([0,0,0]), 2),\r\n            new Color([0,127,255,0.5])\r\n          );\r\n\r\n          poligono = new Graphic(geometria, simbolo);\r\n\r\n          this.map.graphics.clear();\r\n          this.map.graphics.add(poligono);\r\n          this.map.setExtent(geometria.getExtent(), true);\r\n\r\n        }\r\n\r\n      }));\r\n      \r\n    },\r\n\r\n    borrarSeleccion() {\r\n      this.map.graphics.clear();      \r\n    }\r\n\r\n\r\n\r\n    // onClose: function(){\r\n    //   console.log('Xunta_IAG::onClose');\r\n    // },\r\n\r\n    // onMinimize: function(){\r\n    //   console.log('Xunta_IAG::onMinimize');\r\n    // },\r\n\r\n    // onMaximize: function(){\r\n    //   console.log('Xunta_IAG::onMaximize');\r\n    // },\r\n\r\n    // onSignIn: function(credential){\r\n    //   console.log('Xunta_IAG::onSignIn', credential);\r\n    // },\r\n\r\n    // onSignOut: function(){\r\n    //   console.log('Xunta_IAG::onSignOut');\r\n    // }\r\n\r\n    // onPositionChange: function(){\r\n    //   console.log('Xunta_IAG::onPositionChange');\r\n    // },\r\n\r\n    // resize: function(){\r\n    //   console.log('Xunta_IAG::resize');\r\n    // }\r\n\r\n    //methods to communication between widgets:\r\n\r\n  });\r\n\r\n});\r\n"]}